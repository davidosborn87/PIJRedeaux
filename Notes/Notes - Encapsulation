Encapsulation is a programming mechanism that binds together code and the data it manipulates, and that keeps both safe from outside interference and misuse.
In an object-oriented language, code and data can be bound together in such a way that a self-contained black box is created. Within the box are all necessary
data and code.
When code and data are linked together in this fashion, an object is created. In other words, an object is the device that supports encapsulation

Within an object, code, data, or both may be private to that object or public. Private code or data is known to and accessible by only another part of the object.
That is, private code or data cannot be accessed by a piece of the program that exists outside the object.
 When code or data is public, other parts of your program can access it even though it is defined within an object.
 Typically, the public parts of an object are used to provide a controlled interface to the private elements of the object.

Java’s basic unit of encapsulation is the class. Although the class will be examined in great detail later in this book, the following brief discussion will be
helpful now.
 A class defines the form of an object. It specifies both the data and the code that will operate on that data.
 Java uses a class specification to construct objects. Objects are instances of a class.

 Thus, a class is essentially a set of plans that specify how to build an object.

The code and data that constitute a class are called members of the class.
Specifically, the data defined by the class are referred to as member variables or instance variables.
The code that operates on that data is referred to as member methods or just methods. Method is Java’s term for a subroutine.
If you are familiar with C/C++, it may help to know that what a Java programmer calls a method, a C/C++ programmer calls a function.